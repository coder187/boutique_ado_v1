https://learn.codeinstitute.net/courses/course-v1:CodeInstitute+FSF_102+Q1_2020/courseware/4201818c00aa4ba3a0dae243725f6e32/fdc90a8dc2c340faab301539c931069d/?child=first

new repo
full template
pip3 install django
django-admin startproject boutique_ado dot

.gitignore
core.Microsoft*
core.mongo*
core.python*
env.py
__pycache__/
*.py[cod]
node_modules/
.github/
*.sqllite3
*.pyc

check all ok
python3 manage.py runserver 

run migrations
python3 manage.py migrate

create a superuser so that we can log into the admin.
python3 manage.py createsuperuser
superuser
superuser@someemail.com
bigpassword
bigpassword

commit to git "initial commit"

settings.py file
import os

install DJango AllAuth
pip3 install django-allauth==0.41.0

https://django-allauth.readthedocs.io/en/latest/installation.html

urls.py
urlpatterns = [
    path('admin/', admin.site.urls),
    path('accounts/', include('allauth.urls.urls')), # urls for login/logout/password reset etc..
]

add include to imports:
from django.contrib import admin
from django.urls import path, include

after adding some apps we need to update the database
python3 manage.py migrate

navigate to admin page
click sites
update:
domain to: boutique_ado.example.com
display to: boutique_ado


settings.py
EMAIL_BACKEND = django.core.mail.backends.console.EmailBackend #  this will output to console confirmation email sent by allauth. Disalbe on heroku

ACCOUNT_AUTHTENTICATION_METHOD = 'username_email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_SIGNUP_EMAIL_ENTER_TWICE = True
ACCOUNT_USERNAME_MIN_LENGTH = 4
LOGIN_URL = /accounts/login/'
LOGIN_REDIRECT_URL = '/success'


python3 manage.py runserver


And then navigate to /accounts/login
I'll attempt to login using the superuser we created earlier.
And you'll see that this directs us back to a page telling us we need to confirm our email.
So we know allauth is working because email confirmations are now required in order to log in.
The only problem here is that we created this user before installing allauth.
So we need to create and confirm an email manually.
To do that I'm gonna login to the admin.
And open the email address model that was set up when we ran the migrations that came with allauth.
Notice that this model is under the accounts app.
Which specifically is the allauth accounts app that we added to installed apps.
You'll see there's also a social accounts app here.
And you can see the site's framework
that comes from adding django.contrib.sites to our installed apps.
So opening the email address model.
I'll click Add email address.
Select my username.
Enter an email.
And select both verified and primary. To convince allauth that we verified the email.
Saving that. Let's logout and head back to the login page to see the difference.
Now when we log in with the superuser.
we get a 404 page not found, but that's actually a good thing if you look closely.
Because we're actually at the /success url.
That means that our login system redirected us back to the login redirect url in settings.py.
Which confirms that authentication is working properly.
At this point, I'm going to go back to settings.py.
And change the login redirect url to just /
Which means upon logging in will just be redirected to the home page of our store.
It looks like everything is working correctly so far
so let's freeze the requirements of our project with pip3 freeze > requirements.txt



LOGIN_REDIRECT_URL = '/'

pip3 freeze > requirements.txt


git add .
git commit -m "setup allauth"






intstall django
install allauth

create templates/allauth/
copy template files into project dir
this allows customization otherwise default templates are used.
cp -r ../.pip-modules/lib/python3.8/site-packages/allauth/templates/* ./templates/allauth/

import jquery and booststrap
https://code.jquery.com/

 <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">


    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
  <


  create a 'home' app
  python3 manage.py startapp home
  create an home/tempaltes/home/
  create index.html file here
index file contents--
{% extends 'base.html'%}

{% load static %}

{% block content %}
    <h1 class="display-4 text-success">It Works</h1>
{% endblock%}
end index file contents--

we need a view to render the template
views.py
def index(request):
    return render (request, 'home/index.html')

next create urls.py fro  project urls.py [copy]
in home app
start urls.py----

from django.contrib import admin
from django.urls import path
from . import views

urlpatterns = [
    path('',views.index, name='home')
]

end urls.py----

on project level urls.py 
add home urls

now add home app to installed apps in settings.py

DIRS': [
            os.path.join(BASE_DIR,'templates'),
            os.path.join(BASE_DIR,'templates','allauth'),
        ]

start dev server :
python3 manage.py runserver

link static files 
settings.py
STATICFILES_DIRS = '' # tells django where static files are located
Since they're located in the project level static folder.
All we need to do is 
os.path.join(BASE_DIR, 'static')

I'll also add a 
MEDIA_URL and a 
MEDIA_ROUTE which is where all uploaded media files will go.


Lastly to allow Django to see the MEDIA_URL.
We need to go to 
urls.py
Import our settings and the static function from 
django.conf.urls.static
And then use the static function to add the 
MEDIA_URL to our list of URLs.




intstall django
install allauth

create templates/allauth/
copy template files into project dir
this allows customization otherwise default templates are used.
cp -r ../.pip-modules/lib/python3.8/site-packages/allauth/templates/* ./templates/allauth/

import jquery and booststrap
https://code.jquery.com/

 <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">


    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
  <


  create a 'home' app
  python3 manage.py startapp home
  create an home/tempaltes/home/
  create index.html file here
index file contents--
{% extends 'base.html'%}

{% load static %}

{% block content %}
    <h1 class="display-4 text-success">It Works</h1>
{% endblock%}
end index file contents--

we need a view to render the template
views.py
def index(request):
    return render (request, 'home/index.html')

next create urls.py fro  project urls.py [copy]
in home app
start urls.py----

from django.contrib import admin
from django.urls import path
from . import views

urlpatterns = [
    path('',views.index, name='home')
]

end urls.py----

on project level urls.py 
add home urls

now add home app to installed apps in settings.py

DIRS': [
            os.path.join(BASE_DIR,'templates'),
            os.path.join(BASE_DIR,'templates','allauth'),
        ]

start dev server :
python3 manage.py runserver

link static files 
settings.py
STATICFILES_DIRS = '' # tells django where static files are located
Since they're located in the project level static folder.
All we need to do is 
os.path.join(BASE_DIR, 'static')

I'll also add a 
MEDIA_URL and a 
MEDIA_ROUTE which is where all uploaded media files will go.


Lastly to allow Django to see the MEDIA_URL.
We need to go to 
urls.py
Import our settings and the static function from 
django.conf.urls.static
And then use the static function to add the 
MEDIA_URL to our list of URLs.

adding the Products app
add images to media folder (kaggle.com)
create pr0ducts appp
python3 manage.py startapp Products
add to imstallted apps in settings.py

create a fixtures folder within products app - used ot load json data to db
jsonformatter.org

create models in models.py
class Category(models.M<odel):
    name =  models.Charfield(max_lenth=254)
    friendly_name =  models.Charfield(max_lenth=254, null=true, blank=true)
    
    def _str_(self):
        return self.name

    def get_friendly_name(self):
        return self.friendy_name

class Product(models.M<odel):
    ....etc

make migrations
python3 manage.py makemigrations --dry-run
python3 manage.py makemigrations
python3 manage.py migrate -plan
python3 manage.py migrate

admin.py
from models import Product, Category
admin.site.register(Product)
admin.site.register(Category)

python3 manage.py loaddata product.json

to define which fields to display on admin 
define class in admin.py

class ProductAdmin(admin.ModelAdmin):
    list_display = (
        'sku',
        'name',
        'category',
        'price',
        'rating',
        'image',
    )

    ordering = ('sku',)

class CategoryAdmin(admin.ModelAdmin):
    list_display = (
        'friendly_name',
        'name',
    )

admin.site.register(Product, ProductAdmin)
admin.site.register(Category, CategoryAdmin)



to setup products view copy shell from home/views.py

from django.shortcuts import render
from .models import Product


# Create your views here.
def all_prodcuts(request):
    ''' a virw to show all products, inc sorting and search query'''

    products = Product.objects.all()  # get all products

    context = {
        'products': products,
    } 

    return render(request, 'products/products.html', context)
    

    copy home/urls.py to pr0ducts/urls.py
    update file
    update project level ulrs.py #
    path('products/', include('products.urls')),
    create the pr0ducts template
    mkdir -p products/templates/products
    touch products/templates/products/products.html
    base for products page
    
{% extends 'base.html'%}

{% load static %}

{% block page_header %}
    <div class="container header-container">
        <div class="row">
            <div class="col"></div>
        </div>
    </div>
{% endblock %}

{% block content %}
   <div class = "container">
       <div class="row">
           <div class="col">
                {{ products }}
           </div>

       </div>
   </div>
{% endblock %}


add sorting by cat / price etc..
add sortselector drop down
add junmp to top button

add new app 'bag'
add context processor : used to calc contents of the basket - available to whole project
add settings values to settings.py : discount level etc..

note gitpod does not always show the line with the synatx error. The error maybe the line before.


bag urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('', views.view_bag, name='view_bag'),
    path('add/<item_id>/', views.add_to_bag, name='add_to_bag'),
]

bag views.py
from django.shortcuts import render, redirect


# Create your views here.
def view_bag(request):
    return render(request, 'bag/bag.html')


def add_to_bag(request, item_id):
    """ Add a quantity of the specified product to the shopping bag """
    quantity = int(request.POST.get('quantity'))
    redirect_url = request.POST.get('redirect_url')

    bag = request.session.get('bag', {})

    # create a dictionary to hold the session variable 'bag'. If there is no bag session var, create an empty one.
    # if the current item_id exists in the session var, increment by quantiy else set bag.item_id = quantity
    if item_id in list(bag.keys()):
        bag[item_id] += quantity
    else:
        bag[item_id] = quantity

    # overwrite session bag var with updated bag
    request.session['bag'] = bag
    print(request.session['bag'])
    return redirect(redirect_url)


on the form add the POST and action URL
<form class="form" action="{% url 'add_to_bag' product.id %}" method="POST">



note on product size
walkthrough sets size field to false in products table for all excepy clothes.
add the field to the product model
then run makemigrations -dry--run
then run makemigrations 
then migrate --plan
the migrate

then use the shell command to drop to the shell (config by settings.py)
use the shell to set field to true for all clothes products
start of shell
from products.models import Product
kdbb = ['kitchen_dining','bed_bath']

clothes = Product.objects.exclude(category__name__in=kddb)
clothes.count()
=130

for item in clothes:
   ...:     item.has_sizes = True
   ...:     item.save()

Product.objects.filter(has_sizes=True).count()
=130
shell fin 


a note on product size
all products have "has_size" field set to true
we then manually set the products that do not jave haves sizes to false (homeware, cuflinks, pillows etc...)
we add the size select to the detail & bag page and logic to show
for products with no size the session bag has the format {id:quantity}
for products size the session bag has the format id:{item_size:size:qty}
so tthere is an inner dicitionary to loop over when reading the bag contents.
the bag.views.py updates the bag on add to bag
the bag.context.py context processor makes the bag available to all pages.

note on creating foreign keys with django models.
from the walktrhough two tables were created
Order and OrderLineItems
no pks were specified.
OrderLineItems has a foreign key lookup to order speciifed as Order and fk lookup to Products as prodict

order = models.ForeignKey(Order, null=False, blank=False, on_delete=models.CASCADE, related_name='lineitems')
product = models.ForeignKey(Product, null=False, blank=False, on_delete=models.CASCADE)

inspecting the sqlite database after running the migrations I can see that django 
has named the tables app_table - checkput_order and checkout_orderlineitems
has added its own ID PK field to checkput_order and checkout_orderlineitems
has added an fk index for checkout_order.ID on checkout_orderlineitems.ORDER_ID 
and prodcuts_product.ID on checkout_orderlineitems.PRODUCT_ID 
eventhought the corresponding field names are OrderLineItems.order and OrderLineItems.product





CONNECTING TO STRIPE -----
 note set these env vars in gitpod with 
 
# export STRIPE_PUBLIC_KEY=pk_test_51K0ZuLGc2X9Nm4M2l45fWyPvOUNhNfwIvHdIQV2hCcc9uxdBwjRciYsIpUW8KX42QdGdXc9viedqGEF1PBF6GRQ8004qOoKrSs 
# Export STRIPE_SECRET_KEY=THE-SECRET-KEY
# must be re-exported after restarting workspace.



connectung to AWS ----------------
aws s3

aws.amazon.com
create acc

personal
create - cont

credit card
free to limit

aws.amazon.com
sign in - my acc - man console

find services
S3

create new bucket
match heroku app name

uncheck all public access

ack

create bucket

properties TAB
turn on static web site hosting


For the index and error document, we can just fill in some default values
since they won't be used in our case.
And then click save.

Now on the permissions tab we'll make three changes
First I'll paste in a coors configuration
which is going to set up the required access between our Heroku app and this s3 bucket.
Next I'll go to the bucket policy tab.
And select, policy generator so we can create a security policy for this bucket.
The policy type is going to be s3 bucket policy.
Will allow all principals by using a star.
And the action will be, get object.
Now I'll copy the ARN which stands for Amazon resource name from the other tab.
And paste it into the ARN box here at the bottom.
I'll click Add statement.
Then generate policy.
Then copy this policy into the bucket policy editor.
Before I click Save because we want to allow access to all resources in this bucket.
I'll add a slash star here onto the end of the resource key.
Now I can click Save and we're almost done.

access control lsit
list objects permission - everyone



[
  {
      "AllowedHeaders": [
          "Authorization"
      ],
      "AllowedMethods": [
          "GET"
      ],
      "AllowedOrigins": [
          "*"
      ],
      "ExposeHeaders": []
  }
]


iam
identiy access managemnt
1 createa a group
name next step next step cteate grouo
2 policy
policies create policy - json tab - import impolicy - search fro s3 - import s3 full access policy - 
get bucket arn from arn page
and paste that to poixt josn#
review policy add name and desc
crreate policy
3 assign theto the grou
groups select group - seelect policy - attach policy

crrate a user
users page
add user
programmitc access - next
add user to group
next - create user

download csv - ciontains the access keys
save file - cannot be redownloaded.


connect django
pip3 install boto3
pip3 install django-stroages
pip3 freeze > requirements.txt

add to installed apps 'storages'

settings.py DO NOT ADD ACCESS KEYS TO GIT

if 'USE_AWS' in os.environ:
    # Cache control
    	AWS_S3_OBJECT_PARAMETERS = {
        'Expires': 'Thu, 31 Dec 2099 20:00:00 GMT',
        'CacheControl': 'max-age=94608000',
    	}
    # Bucket Config
    AWS_STORAGE_BUCKET_NAME = 'ckz8780-boutique-ado'
    AWS_S3_REGION_NAME = 'us-east-1'
    AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'

    # Static and media files
    STATICFILES_STORAGE = 'custom_storages.StaticStorage'
    STATICFILES_LOCATION = 'static'
    DEFAULT_FILE_STORAGE = 'custom_storages.MediaStorage'
    MEDIAFILES_LOCATION = 'media'

    # Override static and media URLs in production
    STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{STATICFILES_LOCATION}/'
    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{MEDIAFILES_LOCATION}/'
	


heroku 
add keys to config vars#

AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY

renmove diable static

create custom_storages.py on root

from django.conf import settings
from storages.backends.s3boto3 import S3Boto3Storage


class StaticStorage(S3Boto3Storage):
    location = settings.STATICFILES_LOCATION


class MediaStorage(S3Boto3Storage):
    location = settings.MEDIAFILES_LOCATION


git add .
git commit - m
git push

check build log for statuc files.


s3
add new folder 'media'
upload files

grant public read access

next 
upload


add stripe keys 
heroku add config vsrs

stripe
create new web hook endpoint


Now we need to create a new webhook endpoint
since the current one is sending webhooks to our gitpod workspace.
We can do that by going to webhooks in the developer's menu.
Clicking add endpoint. Adding the URL for our Heroku app.
Followed by /checkout/WH
And then selecting receive all events and add endpoint.
We can now reveal our webhooks signing secret.
And add that to our Heroku config variables.
Remember that all these variables need to match what you've got in your settings.py
So if you've used different names, make sure to update them accordingly.
Now let's send a test webhook from stripe to make sure that our listener is working.
With all this complete our e-commerce store is deployed and anyone on the
Internet can navigate our products, create a profile, and even check out
using a test credit card number.
--end aws--




